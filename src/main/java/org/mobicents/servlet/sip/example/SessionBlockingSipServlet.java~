/*
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.mobicents.servlet.sip.example;

import java.sql.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.sip.SipServlet;
import javax.servlet.sip.SipServletContextEvent;
import javax.servlet.sip.SipServletListener;
import javax.servlet.sip.SipServletRequest;
import javax.servlet.sip.SipServletResponse;
import javax.servlet.sip.SipFactory;
import javax.servlet.sip.SipApplicationSession;
import javax.servlet.sip.SipSession;
import javax.servlet.sip.B2buaHelper;
import javax.servlet.sip.SipURI;

import org.apache.log4j.Logger;

/**
 * This examle shows Session Blocking Capabilities. It makes the sip servlet acts as
 * a UAS.
 * Based on the from header it blocks or forwards the web session if it finds the address in its hard coded black list.
 * 
 * @author Jean Deruelle; modified by Michael Adeyeye
 * 
 */
public class SessionBlockingSipServlet extends SipServlet implements SipServletListener {

	private static Logger logger = Logger.getLogger(SessionBlockingSipServlet.class);
	List<String> blockedUris = null;
	Map<String, String[]> forwardingUris = null;
	
      
	/** Creates a new instance of SessionBlockingSipServlet */
	public SessionBlockingSipServlet() {}

	@Override
	public void init(ServletConfig servletConfig) throws ServletException {
		logger.info("the web session blocking sip servlet has been started");
		super.init(servletConfig);
		blockedUris = new ArrayList<String>();
		blockedUris.add("sip:blocked-sender@testdomain.com");
		blockedUris.add("sip:blocked-sender@127.0.0.1");
		forwardingUris = new HashMap<String, String[]>();
		forwardingUris.put("sip:receiver@testdomain.com", 
				new String[]{"sip:forward-receiver@testdomain.com", "sip:forward-receiver@127.0.0.1:5090"});
		forwardingUris.put("sip:receiver@127.0.0.1", 
				new String[]{"sip:forward-receiver@testdomain.com", "sip:forward-receiver@127.0.0.1:5090"});
	}
	
	@Override
    protected void doRegister(SipServletRequest req) throws ServletException, IOException 
	{
		logger.info("Received register request: " + req.getTo());
		int response = SipServletResponse.SC_OK;
		SipServletResponse resp = req.createResponse(response);
		resp.send();
	}

	@Override
	protected void doInvite(SipServletRequest request) throws ServletException,
			IOException {

		logger.info("Got request:\n" + request.toString());
		String fromUri = request.getFrom().getURI().toString();
		String to = request.getTo().getURI().toString();
		logger.info(fromUri);
		String[] forwardingUri = forwardingUris.get(request.getTo().getURI().toString());
		B2buaHelper helper = request.getB2buaHelper();
		
		if(blockedUris.contains(fromUri)) {
			logger.info(fromUri + " has been blocked !");
			SipServletResponse sipServletResponse = request.createResponse(SipServletResponse.SC_FORBIDDEN);
			sipServletResponse.send();		
		} else {
			if(forwardingUri != null && forwardingUri.length > 0) {
				
				SipFactory sipFactory = (SipFactory) getServletContext().getAttribute(
						SIP_FACTORY);
				
				Map<String, List<String>> headers=new HashMap<String, List<String>>();
				List<String> toHeaderSet = new ArrayList<String>();
				toHeaderSet.add(forwardingUri[0]);
				headers.put("To", toHeaderSet);
				
				SipServletRequest forkedRequest = helper.createRequest(request, true,
						headers);
				SipURI sipUri = (SipURI) sipFactory.createURI(forwardingUri[1]);		
				forkedRequest.setRequestURI(sipUri);						
				if(logger.isInfoEnabled()) {
					logger.info("forkedRequest = " + forkedRequest);
				}
				forkedRequest.getSession().setAttribute("originalRequest", request);
				
				forkedRequest.send();
			} else {
				if(logger.isInfoEnabled()) {
					logger.info("Call has not been forwarded.");
				}
			}	
		}
	}

	@Override
    protected void doMessage(SipServletRequest req) throws ServletException, IOException 
	{
		logger.info("Received message request: " + req.getTo());
		String fromUri = req.getFrom().getURI().toString();
		String to = req.getTo().getURI().toString();
		
			 try {
		Statement stmt;
		ResultSet rs;

	      //Register the JDBC driver for MySQL.
	      Class.forName("com.mysql.jdbc.Driver");

	      //Define URL of database server for
	      // database named test on the localhost
	      // with the default port number 3306.
	      String url =
		    "jdbc:mysql://localhost:3306/messageblocking";

	      //Get a connection to the database for a
	      // user named root with a blank password.
	      // This user is the default administrator
	      // having full privileges to do anything.
	      Connection con =
		             DriverManager.getConnection(
		                         url,"mike", "mk4nd");

	      //Display URL and connection information
	      System.out.println("URL: " + url);
	      System.out.println("Connection: " + con);

	      //Get a Statement object
	      stmt = con.createStatement();
	//stmt.executeUpdate("insert into sessiontracking(str_from, str_to) values('sip:mike@127.0.0.1', 'sip:james@15.9.76.4')");
	stmt.executeUpdate("insert into sessiontracking(str_from, str_to) values('" + fromUri + "', '" + to + "')");
	/* rs = stmt.executeQuery("select * from sessiontracking");
	 System.out.println("Display all results:");
	      while(rs.next()){
	        String theStr= rs.getString("str_from");
	        String str = rs.getString("str_URL");
	        System.out.println("\tId= " + theStr
                             + "\tURL = " + str);
    				}//end while loop
		*/
	      con.close();
	    }catch( Exception e ) {
	      e.printStackTrace();
	    }//end catch

		SipSession session = req.getSession();
		B2buaHelper helper = req.getB2buaHelper();
		logger.info(fromUri);
		String[] forwardingUri = forwardingUris.get(req.getTo().getURI().toString());
						
		if(blockedUris.contains(fromUri)) {
			logger.info(fromUri + " has been blocked !");
			
			 //Send a 403 forbidden message
			SipServletResponse sipServletResponse = req.createResponse(SipServletResponse.SC_FORBIDDEN);
			sipServletResponse.send();
			} else {		
		
		if(forwardingUri != null && forwardingUri.length > 0) {
			
			SipFactory sipFactory = (SipFactory) getServletContext().getAttribute(
					SIP_FACTORY);
			
			Map<String, List<String>> headers=new HashMap<String, List<String>>();
			List<String> toHeaderSet = new ArrayList<String>();
			toHeaderSet.add(forwardingUri[0]);
			headers.put("To", toHeaderSet);
			
			SipServletRequest forkedRequest = helper.createRequest(req, true,
					headers);
			SipURI sipUri = (SipURI) sipFactory.createURI(forwardingUri[1]);		
			forkedRequest.setRequestURI(sipUri);						
			if(logger.isInfoEnabled()) {
				logger.info("forkedRequest = " + forkedRequest);
			}
			forkedRequest.getSession().setAttribute("originalRequest", req);
			//Send the request on behalf of the source
			forkedRequest.send();
			//And send a 200 OK to the source
			SipServletResponse sipServletResponse = req.createResponse(SipServletResponse.SC_OK);
			sipServletResponse.send();
		} else {
			if(logger.isInfoEnabled()) {
				logger.info("Web session has not been forwarded.");
			}
		}		
	}
}
	
	

	public void servletInitialized(SipServletContextEvent arg0) {
		logger.info("the Web session blocking sip servlet has been initialized");
	}
}
